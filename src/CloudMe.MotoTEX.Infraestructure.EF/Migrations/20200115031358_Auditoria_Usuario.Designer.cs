// <auto-generated />
using System;
using CloudMe.MotoTEX.Infraestructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CloudMe.MotoTEX.Infraestructure.EF.Migrations
{
    [DbContext(typeof(CloudMeMotoTEXContext))]
    [Migration("20200115031358_Auditoria_Usuario")]
    partial class Auditoria_Usuario
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Contato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assunto")
                        .IsRequired();

                    b.Property<string>("Conteudo")
                        .IsRequired();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Email");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("IdPassageiro");

                    b.Property<Guid?>("IdTaxista");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<string>("Nome");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdPassageiro");

                    b.HasIndex("IdTaxista");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Contato");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Contrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Conteudo")
                        .IsRequired();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<bool>("UltimaVersao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Contrato");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.CorVeiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("CorVeiculo");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Corrida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AvaliacaoPassageiro")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("AvaliacaoTaxista")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime?>("Fim");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("IdRotaExecutada");

                    b.Property<Guid>("IdSolicitacao");

                    b.Property<Guid>("IdTarifa");

                    b.Property<Guid>("IdTaxista");

                    b.Property<Guid>("IdVeiculo");

                    b.Property<DateTime?>("Inicio");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("TempoEmEspera")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UltimaPausa");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdRotaExecutada");

                    b.HasIndex("IdSolicitacao")
                        .IsUnique();

                    b.HasIndex("IdTarifa");

                    b.HasIndex("IdTaxista");

                    b.HasIndex("IdVeiculo");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Corrida");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Emergencia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdTaxista");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<int>("Status");

                    b.Property<Guid?>("TaxistaId");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("TaxistaId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Emergencias");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro")
                        .IsRequired();

                    b.Property<string>("CEP")
                        .IsRequired();

                    b.Property<string>("Complemento");

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("IdLocalizacao");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<string>("Localidade")
                        .IsRequired();

                    b.Property<string>("Logradouro")
                        .IsRequired();

                    b.Property<string>("Numero")
                        .IsRequired();

                    b.Property<string>("UF")
                        .IsRequired();

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdLocalizacao")
                        .IsUnique();

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.FaixaDesconto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Descricao");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.Property<float>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("FaixaDesconto");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.FaixaDescontoTaxista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdFaixaDesconto");

                    b.Property<Guid>("IdTaxista");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdFaixaDesconto");

                    b.HasIndex("IdTaxista");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("FaixaDescontoTaxista");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Favorito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdPassageiro");

                    b.Property<Guid>("IdTaxista");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<int>("Preferencia");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdPassageiro");

                    b.HasIndex("IdTaxista");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Favorito");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.FormaPagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("FormaPagamento");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.FormaPagamentoTaxista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdFormaPagamento");

                    b.Property<Guid>("IdTaxista");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdFormaPagamento");

                    b.HasIndex("IdTaxista");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("FormaPagamentoTaxista");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Foto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Dados");

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<string>("Nome");

                    b.Property<string>("NomeArquivo");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Foto");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.GrupoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("GrupoUsuario");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Localizacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Endereco");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("IdUsuario");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<string>("Latitude")
                        .IsRequired();

                    b.Property<string>("Longitude")
                        .IsRequired();

                    b.Property<string>("NomePublico");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Localizacao");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Mensagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Apagada")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Assunto");

                    b.Property<string>("Corpo")
                        .IsRequired();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdRemetente");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdRemetente");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Mensagem");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.MensagemDestinatario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataLeitura");

                    b.Property<DateTime?>("DataRecebimento");

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("IdGrupoUsuario");

                    b.Property<Guid>("IdMensagem");

                    b.Property<Guid>("IdUsuario");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdGrupoUsuario");

                    b.HasIndex("IdMensagem");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("MensagemDestinatario");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Passageiro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdEndereco");

                    b.Property<Guid>("IdFoto");

                    b.Property<Guid?>("IdLocalizacaoAtual");

                    b.Property<Guid?>("IdUsuario");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdEndereco")
                        .IsUnique();

                    b.HasIndex("IdFoto")
                        .IsUnique();

                    b.HasIndex("IdLocalizacaoAtual")
                        .IsUnique();

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Passageiro");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.PontoTaxi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdEndereco");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdEndereco")
                        .IsUnique();

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("PontoTaxi");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Rota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Rota");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.SolicitacaoCorrida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Data");

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<int>("ETA");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("IdFaixaDesconto");

                    b.Property<Guid>("IdFormaPagamento");

                    b.Property<Guid>("IdLocalizacaoDestino");

                    b.Property<Guid>("IdLocalizacaoOrigem");

                    b.Property<Guid>("IdPassageiro");

                    b.Property<Guid?>("IdRota");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<bool>("IsInterUrbano")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Situacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("StatusMonitoramento")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("TempoDisponivel");

                    b.Property<int>("TipoAtendimento")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.Property<float?>("ValorEstimado");

                    b.Property<float?>("ValorProposto");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdFaixaDesconto");

                    b.HasIndex("IdFormaPagamento");

                    b.HasIndex("IdLocalizacaoDestino");

                    b.HasIndex("IdLocalizacaoOrigem");

                    b.HasIndex("IdPassageiro");

                    b.HasIndex("IdRota");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("SolicitacaoCorrida");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.SolicitacaoCorridaTaxista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Acao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdSolicitacaoCorrida");

                    b.Property<Guid>("IdTaxista");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdSolicitacaoCorrida");

                    b.HasIndex("IdTaxista");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("SolicitacaoCorridaTaxista");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Tarifa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Bandeirada");

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<float>("HoraParada");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<float>("KmRodadoBandeira1");

                    b.Property<float>("KmRodadoBandeira2");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Tarifa");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("Disponivel")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdEndereco");

                    b.Property<Guid>("IdFoto");

                    b.Property<Guid?>("IdLocalizacaoAtual");

                    b.Property<Guid?>("IdPontoTaxi");

                    b.Property<Guid?>("IdUsuario");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdEndereco")
                        .IsUnique();

                    b.HasIndex("IdFoto")
                        .IsUnique();

                    b.HasIndex("IdLocalizacaoAtual")
                        .IsUnique();

                    b.HasIndex("IdPontoTaxi");

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Taxista");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CPF");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nome");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RG");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("tipo");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.UsuarioGrupoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdGrupoUsuario");

                    b.Property<Guid>("IdUsuario");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdGrupoUsuario");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("UsuarioGrupoUsuario");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ano")
                        .IsRequired();

                    b.Property<int>("Capacidade");

                    b.Property<string>("Cor");

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid?>("IdCorVeiculo");

                    b.Property<Guid?>("IdFoto");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<string>("Marca")
                        .IsRequired();

                    b.Property<string>("Modelo")
                        .IsRequired();

                    b.Property<string>("Placa")
                        .IsRequired();

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.Property<string>("Versao");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdCorVeiculo");

                    b.HasIndex("IdFoto")
                        .IsUnique();

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Veiculo");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.VeiculoTaxista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<Guid?>("DeleteUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("ForceDelete");

                    b.Property<Guid>("IdTaxista");

                    b.Property<Guid>("IdVeiculo");

                    b.Property<Guid?>("InsertUserId");

                    b.Property<DateTime>("Inserted");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("IdTaxista");

                    b.HasIndex("IdVeiculo");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("VeiculoTaxista");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastAccessed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("NonEditable");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApiResources");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiResourceId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiClaims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiResourceId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiProperties");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiResourceId");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200);

                    b.Property<bool>("Emphasize");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("Required");

                    b.Property<bool>("ShowInDiscoveryDocument");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApiScopes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiScopeId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ApiScopeId");

                    b.ToTable("ApiScopeClaims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiResourceId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiSecrets");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AbsoluteRefreshTokenLifetime");

                    b.Property<int>("AccessTokenLifetime");

                    b.Property<int>("AccessTokenType");

                    b.Property<bool>("AllowAccessTokensViaBrowser");

                    b.Property<bool>("AllowOfflineAccess");

                    b.Property<bool>("AllowPlainTextPkce");

                    b.Property<bool>("AllowRememberConsent");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken");

                    b.Property<bool>("AlwaysSendClientClaims");

                    b.Property<int>("AuthorizationCodeLifetime");

                    b.Property<bool>("BackChannelLogoutSessionRequired");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasMaxLength(2000);

                    b.Property<string>("ClientClaimsPrefix")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ClientName")
                        .HasMaxLength(200);

                    b.Property<string>("ClientUri")
                        .HasMaxLength(2000);

                    b.Property<int?>("ConsentLifetime");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int>("DeviceCodeLifetime");

                    b.Property<bool>("EnableLocalLogin");

                    b.Property<bool>("Enabled");

                    b.Property<bool>("FrontChannelLogoutSessionRequired");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasMaxLength(2000);

                    b.Property<int>("IdentityTokenLifetime");

                    b.Property<bool>("IncludeJwtId");

                    b.Property<DateTime?>("LastAccessed");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2000);

                    b.Property<bool>("NonEditable");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasMaxLength(200);

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("RefreshTokenExpiration");

                    b.Property<int>("RefreshTokenUsage");

                    b.Property<bool>("RequireClientSecret");

                    b.Property<bool>("RequireConsent");

                    b.Property<bool>("RequirePkce");

                    b.Property<int>("SlidingRefreshTokenLifetime");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCodeType")
                        .HasMaxLength(100);

                    b.Property<int?>("UserSsoLifetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientClaims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientCorsOrigins");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientGrantTypes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientIdPRestrictions");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("PostLogoutRedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientPostLogoutRedirectUris");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientProperties");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientRedirectUris");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientScopes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSecrets");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired();

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdentityResourceId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("IdentityResourceId");

                    b.ToTable("IdentityClaims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200);

                    b.Property<bool>("Emphasize");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("NonEditable");

                    b.Property<bool>("Required");

                    b.Property<bool>("ShowInDiscoveryDocument");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IdentityResources");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdentityResourceId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("IdentityResourceId");

                    b.ToTable("IdentityProperties");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Exception");

                    b.Property<string>("Level")
                        .HasMaxLength(128);

                    b.Property<string>("LogEvent");

                    b.Property<string>("Message");

                    b.Property<string>("MessageTemplate");

                    b.Property<string>("Properties");

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Contato", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Passageiro", "Passageiro")
                        .WithMany("Contatos")
                        .HasForeignKey("IdPassageiro");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "Taxista")
                        .WithMany("Contatos")
                        .HasForeignKey("IdTaxista");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Contrato", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.CorVeiculo", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Corrida", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Rota", "RotaExecutada")
                        .WithMany()
                        .HasForeignKey("IdRotaExecutada");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.SolicitacaoCorrida", "Solicitacao")
                        .WithOne("Corrida")
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Corrida", "IdSolicitacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Tarifa", "Tarifa")
                        .WithMany()
                        .HasForeignKey("IdTarifa")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "Taxista")
                        .WithMany("Corridas")
                        .HasForeignKey("IdTaxista")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Veiculo", "Veiculo")
                        .WithMany("Corridas")
                        .HasForeignKey("IdVeiculo")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Emergencia", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "Taxista")
                        .WithMany()
                        .HasForeignKey("TaxistaId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Endereco", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Localizacao", "Localizacao")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Endereco", "IdLocalizacao");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.FaixaDesconto", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.FaixaDescontoTaxista", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.FaixaDesconto", "FaixaDesconto")
                        .WithMany("Taxistas")
                        .HasForeignKey("IdFaixaDesconto")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "Taxista")
                        .WithMany("FaixasDesconto")
                        .HasForeignKey("IdTaxista")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Favorito", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Passageiro", "Passageiro")
                        .WithMany("TaxistasFavoritos")
                        .HasForeignKey("IdPassageiro")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "Taxista")
                        .WithMany("Favoritos")
                        .HasForeignKey("IdTaxista")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.FormaPagamento", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.FormaPagamentoTaxista", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.FormaPagamento", "FormaPagamento")
                        .WithMany("Taxistas")
                        .HasForeignKey("IdFormaPagamento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "Taxista")
                        .WithMany("FormasPagamento")
                        .HasForeignKey("IdTaxista")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Foto", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.GrupoUsuario", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Localizacao", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Localizacao", "IdUsuario");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Mensagem", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "Remetente")
                        .WithMany("MensagensEnviadas")
                        .HasForeignKey("IdRemetente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.MensagemDestinatario", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.GrupoUsuario", "GrupoUsuarios")
                        .WithMany("MensagensRecebidas")
                        .HasForeignKey("IdGrupoUsuario");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Mensagem", "Mensagem")
                        .WithMany("Destinatarios")
                        .HasForeignKey("IdMensagem")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "Usuario")
                        .WithMany("MensagensRecebidas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Passageiro", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Endereco", "Endereco")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Passageiro", "IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Foto", "Foto")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Passageiro", "IdFoto")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Localizacao", "LocalizacaoAtual")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Passageiro", "IdLocalizacaoAtual");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Passageiro", "IdUsuario");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.PontoTaxi", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Endereco", "Endereco")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.PontoTaxi", "IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Rota", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.SolicitacaoCorrida", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.FaixaDesconto", "FaixaDesconto")
                        .WithMany()
                        .HasForeignKey("IdFaixaDesconto");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.FormaPagamento", "FormaPagamento")
                        .WithMany()
                        .HasForeignKey("IdFormaPagamento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Localizacao", "LocalizacaoDestino")
                        .WithMany()
                        .HasForeignKey("IdLocalizacaoDestino")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Localizacao", "LocalizacaoOrigem")
                        .WithMany()
                        .HasForeignKey("IdLocalizacaoOrigem")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Passageiro", "Passageiro")
                        .WithMany("SolicitacoesCorrida")
                        .HasForeignKey("IdPassageiro")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("IdRota");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.SolicitacaoCorridaTaxista", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.SolicitacaoCorrida", "SolicitacaoCorrida")
                        .WithMany("Taxistas")
                        .HasForeignKey("IdSolicitacaoCorrida")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "Taxista")
                        .WithMany("SolicitacoesCorrida")
                        .HasForeignKey("IdTaxista")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Tarifa", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Endereco", "Endereco")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Foto", "Foto")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "IdFoto")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Localizacao", "LocalizacaoAtual")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "IdLocalizacaoAtual");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.PontoTaxi", "PontoTaxi")
                        .WithMany("Taxistas")
                        .HasForeignKey("IdPontoTaxi");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "IdUsuario");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.UsuarioGrupoUsuario", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.GrupoUsuario", "GrupoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdGrupoUsuario")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "Usuario")
                        .WithMany("Grupos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.Veiculo", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.CorVeiculo", "CorVeiculo")
                        .WithMany()
                        .HasForeignKey("IdCorVeiculo");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Foto", "Foto")
                        .WithOne()
                        .HasForeignKey("CloudMe.MotoTEX.Infraestructure.Entries.Veiculo", "IdFoto");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("CloudMe.MotoTEX.Infraestructure.Entries.VeiculoTaxista", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Taxista", "Taxista")
                        .WithMany("Veiculos")
                        .HasForeignKey("IdTaxista")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Veiculo", "Veiculo")
                        .WithMany("Taxistas")
                        .HasForeignKey("IdVeiculo")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId");

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Properties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiScope", "ApiScope")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiScopeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiSecret", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("Properties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CloudMe.MotoTEX.Infraestructure.Entries.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
